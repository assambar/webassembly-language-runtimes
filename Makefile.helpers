define push_container_image
    $(eval $@_IMAGE_NAME = $(1))
    @(docker image inspect $($@_IMAGE_NAME) 1>/dev/null 2>&1 || \
		(echo "Missing $($@_IMAGE_NAME). Cannot push" && false) ) && \
	echo Pushing $($@_IMAGE_NAME) ... && \
	echo Authenticating to ghcr.io ... && \
	docker login ghcr.io && \
	docker push $($@_IMAGE_NAME) && \
	docker image rm $($@_IMAGE_NAME) && \
	echo Pushed and deleted local tag to avoid usage of stale image in future.
endef


define make_builder_image
    $(eval $@_IMAGE_NAME = $(1))
    $(eval $@_ROOT_DIR = $(2))
    $(eval $@_WASI_SDK_VERSION = $(3))
	@echo Building $($@_IMAGE_NAME) in $($@_ROOT_DIR) ... && \
	docker build \
		--platform linux/amd64 \
		-f $($@_ROOT_DIR)/Dockerfile \
		--build-arg WASI_SDK_VERSION=$($@_WASI_SDK_VERSION) \
		-t $($@_IMAGE_NAME) \
		$($@_ROOT_DIR)
endef


##########
# Builds a wl-make target inside a container.
# USAGE:
#  - Inside a GNU make target
#  - @$(call build_in_container,ghcr.io/vmware-labs/wasmlabs/wasi-builder:19,$(REPO_ROOT),libs/zlib/v1.2.13)
#
define build_in_container
    $(eval $@_IMAGE_NAME = $(1))
    $(eval $@_REPO_ROOT = $(2))
    $(eval $@_WL_MAKE_TARGET = $(3))
	docker run \
		--platform linux/amd64 \
		--rm \
		-e WLR_BUILD_FLAVOR \
		-e WLR_RUNTIME \
		-e WLR_SKIP_CONFIGURE \
		-e WLR_DEPS_FORCE_LOCAL \
		-e WLR_PACKAGE_NAME \
		-e WLR_PACKAGE_VERSION \
		-v $($@_REPO_ROOT):/wlr/ \
		-v $($@_REPO_ROOT)/scripts/wrappers/wasm-opt:/opt/priority-bin/wasm-opt \
		$($@_IMAGE_NAME) \
		./wl-make.sh $($@_WL_MAKE_TARGET)
endef


##########
# Creates lib subtargets targets for libs that are built from external repo.
#
# USAGE:
#  - At root level (not as part of a target)
#  - Within the $(REPO_ROOT)/Makefile
#  - $(eval $(call create_external_lib_sub_targets,zlib))
#  - $(eval $(call create_external_lib_sub_targets,uuid))

define create_external_lib_sub_targets
# $1 - LIB_NAME

.PHONY: libs/$(1)/*
libs/$(1)/*:
	make -C libs/$(1) $$(subst libs/$(1)/,,$$@)

endef


##########
# Creates lib subtargets targets for libs that are built from this repo.
#
# USAGE:
#  - At root level (not as part of a target)
#  - Within the $(REPO_ROOT)/Makefile
#  - $(eval $(call create_local_lib_sub_targets,zlib))
#  - $(eval $(call create_local_lib_sub_targets,uuid))

define create_local_lib_sub_targets
# $1 - LIB_NAME

.PHONY: libs/$(1)
libs/$(1):
	make -C libs/$(1)

endef


##########
# Creates default targets for lib without extra builder container.
#
# USAGE:
#  - At Makefile root level (not as part of a target)
#  - Within the lib/LIBNAME/Makefile
#  - $(eval $(call create_default_external_lib_targets,$(REPO_ROOT),zlib,$(WASI_SDK_VERSION)))
#  - $(eval $(call create_default_external_lib_targets,$(REPO_ROOT),uuid,$(WASI_SDK_VERSION)))
#
define create_default_external_lib_targets
# $1 - REPO_ROOT
# $2 - LIB_NAME
# $3 - WASI_SDK_VERSION

$(eval $(2)_BUILDER = ghcr.io/vmware-labs/wasmlabs/wasi-builder:$(3))

.PHONY: v*
v*:
	@$(call build_in_container,$($(2)_BUILDER),$(1),libs/$(2)/$$$$@)

# The four $$-s are there because we have two passes in which we escape $ by a double $.
# We need the $@ variable only when the target is actually built

.PHONY: clean
clean:
	rm -rf $(1)/build-output/$(2) $(1)/build-staging/$(2)

endef



##########
# Creates default targets for local lib without extra builder container.
#
# USAGE:
#  - At Makefile root level (not as part of a target)
#  - Within the lib/LIBNAME/Makefile
#  - $(eval $(call create_default_local_lib_targets,$(REPO_ROOT),bundle_wlr,$(WASI_SDK_VERSION)))
#
define create_default_local_lib_targets
# $1 - REPO_ROOT
# $2 - LIB_NAME
# $3 - WASI_SDK_VERSION

$(eval $(2)_BUILDER = ghcr.io/vmware-labs/wasmlabs/wasi-builder:$(3))

.PHONY: all
all:
	@$(call build_in_container,$($(2)_BUILDER),$(1),libs/$(2))

# The four $$-s are there because we have two passes in which we escape $ by a double $.
# We need the $@ variable only when the target is actually built

.PHONY: clean
clean:
	rm -rf $(1)/build-output/$(2) $(1)/build-staging/$(2)

endef
